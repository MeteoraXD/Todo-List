/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TodoviewImport } from './routes/todoview'
import { Route as RegistrationImport } from './routes/registration'
import { Route as LoginImport } from './routes/login'
import { Route as IncompletetaskImport } from './routes/incompletetask'
import { Route as CompletedtaskImport } from './routes/completedtask'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const TodoviewRoute = TodoviewImport.update({
  id: '/todoview',
  path: '/todoview',
  getParentRoute: () => rootRoute,
} as any)

const RegistrationRoute = RegistrationImport.update({
  id: '/registration',
  path: '/registration',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IncompletetaskRoute = IncompletetaskImport.update({
  id: '/incompletetask',
  path: '/incompletetask',
  getParentRoute: () => rootRoute,
} as any)

const CompletedtaskRoute = CompletedtaskImport.update({
  id: '/completedtask',
  path: '/completedtask',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/completedtask': {
      id: '/completedtask'
      path: '/completedtask'
      fullPath: '/completedtask'
      preLoaderRoute: typeof CompletedtaskImport
      parentRoute: typeof rootRoute
    }
    '/incompletetask': {
      id: '/incompletetask'
      path: '/incompletetask'
      fullPath: '/incompletetask'
      preLoaderRoute: typeof IncompletetaskImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/registration': {
      id: '/registration'
      path: '/registration'
      fullPath: '/registration'
      preLoaderRoute: typeof RegistrationImport
      parentRoute: typeof rootRoute
    }
    '/todoview': {
      id: '/todoview'
      path: '/todoview'
      fullPath: '/todoview'
      preLoaderRoute: typeof TodoviewImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/completedtask': typeof CompletedtaskRoute
  '/incompletetask': typeof IncompletetaskRoute
  '/login': typeof LoginRoute
  '/registration': typeof RegistrationRoute
  '/todoview': typeof TodoviewRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/completedtask': typeof CompletedtaskRoute
  '/incompletetask': typeof IncompletetaskRoute
  '/login': typeof LoginRoute
  '/registration': typeof RegistrationRoute
  '/todoview': typeof TodoviewRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/completedtask': typeof CompletedtaskRoute
  '/incompletetask': typeof IncompletetaskRoute
  '/login': typeof LoginRoute
  '/registration': typeof RegistrationRoute
  '/todoview': typeof TodoviewRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/completedtask'
    | '/incompletetask'
    | '/login'
    | '/registration'
    | '/todoview'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/completedtask'
    | '/incompletetask'
    | '/login'
    | '/registration'
    | '/todoview'
  id:
    | '__root__'
    | '/'
    | '/completedtask'
    | '/incompletetask'
    | '/login'
    | '/registration'
    | '/todoview'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CompletedtaskRoute: typeof CompletedtaskRoute
  IncompletetaskRoute: typeof IncompletetaskRoute
  LoginRoute: typeof LoginRoute
  RegistrationRoute: typeof RegistrationRoute
  TodoviewRoute: typeof TodoviewRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CompletedtaskRoute: CompletedtaskRoute,
  IncompletetaskRoute: IncompletetaskRoute,
  LoginRoute: LoginRoute,
  RegistrationRoute: RegistrationRoute,
  TodoviewRoute: TodoviewRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/completedtask",
        "/incompletetask",
        "/login",
        "/registration",
        "/todoview"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/completedtask": {
      "filePath": "completedtask.tsx"
    },
    "/incompletetask": {
      "filePath": "incompletetask.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/registration": {
      "filePath": "registration.tsx"
    },
    "/todoview": {
      "filePath": "todoview.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
